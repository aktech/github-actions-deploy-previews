name: Deploy Preview on GitHub Actions

on:
  push:
    branches:
      - main
  pull_request:
    types: [labeled, synchronize]

jobs:
  deploy:
    if: contains(github.event.pull_request.labels.*.name, 'deploy')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      actions: read  # Ensures the job can access other actions if ne

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set APP_DNS and SSH url Variable
        run: |
            echo "APP_DNS=app-pr-${{ github.event.pull_request.number }}.iakte.ch" >> $GITHUB_ENV
            echo "SSH_DNS=ssh-pr-${{ github.event.pull_request.number }}.iakte.ch" >> $GITHUB_ENV

      - name: Restore Let's Encrypt wildcard certs cache
        uses: actions/cache@v4.2.0
        with:
          path: letsencrypt
          key: letsencrypt-${{ runner.os }}
          restore-keys: |
            letsencrypt-${{ runner.os }}

      - name: Deploy a whoami app
        run: |
          echo "Deploying whoami app"
          APP_DNS=$APP_DNS docker compose pull
          APP_DNS=$APP_DNS docker compose up -d
          echo "Deployed whoami app"
        env:
          APP_DNS: ${{ env.APP_DNS }}
          CLOUDFLARE_DNS_API_TOKEN: ${{ secrets.CLOUDFLARE_DNS_API_TOKEN }}

      - name: Add a DNS record
        run: |
          echo "Add a cloudflare DNS record"
          curl -X POST "https://api.cloudflare.com/client/v4/zones/$CLOUDFLARE_ZONE_ID/dns_records" \
            -H "Authorization: Bearer $CLOUDFLARE_DNS_API_TOKEN" \
            -H "Content-Type: application/json" \
            --data '{
            "type": "A",
            "name": "'"$APP_DNS"'",
            "content": "144.21.49.62",
            "ttl": 3600,
            "proxied": false
          }'
        env:
          CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
          CLOUDFLARE_DNS_API_TOKEN: ${{ secrets.CLOUDFLARE_DNS_API_TOKEN }}

      - name: Setup FRP Tunnel
        uses: cirunlabs/frp-tunnel-action@main
        with:
          timeout_minutes: 0
          frp_client_config: |
            serverAddr = "${{ secrets.FRP_SERVER }}"
            serverPort = 7000
            auth.method = "token"
            auth.token = "${{ secrets.FRP_TOKEN }}"

            [[proxies]]
            name = "github-runner-ssh--${{ github.run_id }}-${{ github.sha }}"
            type = "tcpmux"
            multiplexer = "httpconnect"
            localIP = "127.0.0.1"
            localPort = 22
            customDomains = ["${{ env.SSH_DNS }}"]

            [[proxies]]
            name = "github-runner-http--${{ github.run_id }}-${{ github.sha }}"
            type = "https"
            localIP = "127.0.0.1"
            localPort = 443
            customDomains = ["${{ env.APP_DNS }}"]

      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: thollander/actions-comment-pull-request@v3
        with:
          message: |
            Preview has been deployed! :rocket:

            App deployed at: https://${{ env.APP_DNS }}
            You can ssh into the runner via:

              ```bash
              ssh -o 'proxycommand socat - PROXY:${{ env.APP_DNS }}:%h:%p,proxyport=5002' runner@${{ env.SSH_DNS }}
              ```

      - name: Docker compose logs
        run: docker compose logs

      - name: Wait for label removal
        if: github.event_name == 'pull_request'
        run: |
          pr_number=${{ github.event.pull_request.number }}
          label_to_wait_for="deploy"
          repo=${{ github.repository }}

          echo "Monitoring PR #$pr_number for removal of label '$label_to_wait_for'..."

          while true; do
            labels=$(gh pr view $pr_number --repo $repo --json labels --jq '.labels[].name')

            if [[ ! "$labels" =~ "$label_to_wait_for" ]]; then
              echo "Label '$label_to_wait_for' has been removed. Continuing workflow..."
              break
            fi

            echo "Label '$label_to_wait_for' still present. Rechecking in 30 seconds..."
            sleep 30
          done
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Cache Let's Encrypt wildcard certs data
        if: success()
        uses: actions/cache@v4.2.0
        with:
          path: letsencrypt
          key: letsencrypt-${{ runner.os }}
